1. Create file chapter1.txt. Then add some text.
2. Initialize git: "git init"
3. In order to start tracking the changes of my files, for example, chapter1.txt, then I need to add this file to what's called a staging area. And that is basically a intermediate place
  you can pick and choose which files inside you are working directory that you want to commit.
4. To see what's currently inside the staging area, you use the "git status" and it shows you that there are untracked files which will be shown in red and this is something that simply
  inside your working directory but it's not in the staging area.
  > git status
5. In order to add it to staging area and to start tracking changes in it, then we have to use the command "git add filename" then if we try again hit status again you can see that file
  has been added as a new file and it is now green. So this now in the staging area and it's ready to be committed. 
  > git add chapter1.txt
  > git status
6. To commit this under version control. So the command is "git commit" and -m flag to add commit message. Commit message is really important. It's something that helps you keep track of
  what changes you have made in each commit. So when you create a new save point, you want to be as explicit as possible about what changes were made between the last save point and this
  current save point. So for our initial commit we can use something very simple like "Initial Commit" e.g. git commit -m "Initial Commit". And this shows that this our starting point. 
  Alternatively if you want to be slightly more specific because in our case we've actually completed chapter1, so you can write "Complete Chapter 1". The commit messages usually are in
  "present tense" and this the best practice. That is you are submitting your changes now.
  > git commit -m "Complete Chapter 1"
7. To see what commits you have made by using "git log" command. You can see this commit is made at what time and by this person. And it also has a hash and this has uniquely identifies
  this particular commit. And then right at the end you see this commit message of what this savepoint was all about.
8. Now we'll create 2 more chapters (chapter2.txt, chapter3.txt). Let's add these 2 new files to staging area. If you see "git status" you will see these 2 files that are untracked which
  are only in the working directory and not yet inside the staging area. So we can put them into the staging area by simply adding each of them as we did before.
  > git status
  > git add chapter2.txt
  > git add chapter3.txt
9. If you have quite a few files then it can get incredibly tedious having to do this one by one. So to add all files we simple say "git add ." i.e. add everything inside this current 
  directory.
  > git add .
  > git status
10. You can see these files are added to staging area. Now we're going to commit those 2 files to a new commit to a new save point.
  > git commit -m "complete chapter 2 and 3"
11. Now check it out using "git log", that we have two commits both with different hashes because they are unique. So the initial one was "Complete Chapter 1" and later on second commit
  "complete chapter 2 and 3". And (HEAD -> master) is directing to 2nd commit that is recent commit. That is HEAD is on 2nd commit. "HEAD" is the position or the current state that we 
  are in.
12. Working Directory -> (git add) -> Staging Area -> (git commit) -> Local Repository (master branch: main branch of commits or save points and it is sequencial)
13. If we messed up our file, we can still use the last version that's under version version control and we can use a special command called "git checkout" to revert back or rollback to
  the last position in our local repository. If in "chapter3.txt", if I accidently typed something that I didn't want to and saved it. Then I can revert the changes that I've made locally
  in my working directory. You can see in "git status" that this file has been modified and in red.
14. So to check what changes were done on that file "chapter3.txt" that have not been added or committed. To check differences between the current version of chapter 3 and the last save
  point in our Git repository. We can use the command "git diff filename". You can see the red lines which is removed and green line which is added.
  > git diff chapter3.txt
15. To rollback the changes to previous version we use command "git checkout filename". The file will be modified to last version.
  > git checkout chapter3.txt
=> Here we looked mostly at local implementation of Git so saving these versions on our computer locally.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
REMOTE REPOSITORY:
1. Here we'll see how we can create remote repository. So a repository that's hosted on somebody else's server or somebody else's computer by using "GitHub".
2. Head over to "https://github.com" and create an account.
3. Navigate to the top right corner and click on "+" plus arrow and select "new repository". We'll call our repository "Story" and let's give description "My masterpiece". By default all
  repositories you create on "GitHub" are public. Once we selected "public", the next thing is that we're going to leave this part empty where it's mentioned "Initialize this repository with"
	We're not going to initialize readme and .ignore for our repository just yet. Now click on "Create Repository"
4. There are 2 ways you can set you repository. We are going to use command line instructions to set up our repository. So we're going to push an existing repository that we've got locally
  onto this remote repository and to do that we need to copy the address of our GitHub repository "https://github.com/anirudhdavajpeyi/Story.git" and we are going to use below two lines
  of code in order to transfer or push our existing local repository from the command line (given in github but we'll use different)
  > git remote add origin https://github.com/anirudhdavajpeyi/Story.git
  > git branch -M main
  > git push -u origin main
5. Go into our repository which is working directory for this particular project. We'll take a look at "git log" to see what previous commits we've got.
  > git log
6. We can see there are 2 previous commits. And I would like to push both of these commits on to GitHub. So first thing is creating a remote. So telling my local GIT repository that I've
  created a remote repository somewhere on the internet and I want to transfer all of my commits over there. So the command that we are going to use "git remote add origin url"
  > git remote add origin https://github.com/anirudhdavajpeyi/Story.git
7. "origin" is simply a name of your remote and you can theoretically call it anything you want. But by convention and it's highly recommended that you simply keet the name "origin".
8. Now that remote is created so we can push our local repository onto our remote repository which is called "origin" with command "git push -u origin master". What this line of code does
  is that it pushes your local repository to the remote repository using the "u" flag or the "u" option which is basically links up your remote and your local repositories. And then we're 
  going to push it towards the remote that's called "origin" and we're going to push it to the branch that's called "master". So the "master" branch is simply the default branch or the main
  branch of all your commits.
	Now we're going to push our local repository onto this origin remote and we're going to push to the master branch.
  > git push -u origin master
9. Working Directory -> (git add) -> Stagin Area -> (git commit) -> Local Repository (Git) -> (git push) -> Remote Repository (Git Hub)
10. (.gitignore) is used to avoid uploading sensitive pieces of information such as API Keys, or passwords to your remote repositories for example GitHub.
11. When we add files in the staging area using "git add ." or any specific file "git add filename" but we want to remove those files from staging area or undo. Then we can use the command
  "git -rm --cached -r ." where "-rm": remove, "--cached" that is staging, "-r" for recursive and dot "." for all the files. That is remove all the files from staging area.
  > git -rm --cached -r .
12. (.gitignore): In this hidden file, we provide names of files which we don't want be considered in the project or to push to remote repository. We just have to provide filenames in this
  file like "secrets.txt", ".DS_Store". And inside ".gitignore" file we can provide comments using "#" sign. 
	We can also use wild cards i.e. *.txt that means ignore all files with extension .txt
13. In github/gitignore -> Swift.gitignore: which you can copy paste. These are the names of files which you would want to ignore.
14. Where should we put API keys or sensitive data? => You have to make sure when you're uploading your projects with these secret keys and passwords to make sure that you set up a gitignore
  file and to include those things in there.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
CLONING:
1. Here we are going to clone remote repository to pull it into your local machine. We use command "git clone" and this is a way for you pull down all of the commits and all of the versions
  of a particular remote repository and to store the files inside your working directory.
2. There is repository "swift-2048". We can port it onto our system and we can have a look at the code or simply run it and give it a go.
3. We are going to click on button "Clone or download". Simply download the zip and unzip it. Now this is not as great an option as using "git clone". So this is what we're going to do.
  We will copy the URL of this particular repository then we can go back into our terminal and clone it to our desktop. Go to Desktop in gitbash and clone it.
  > git clone https://github.com/austinzheng/swift-2048.git
4. Now if we take a look in our desktop folder, we can see the folder "swift-2048". So this is the project that I've just cloned down from GitHub. 
5. Once you've cloned a project and you cd into it, you can also use "git log" to check out some of their previous commits and you can see they've got all these commit messages that tell
  you what each commit was all about.
  > git log
6. So in the future when you need to grab any of the skeleton projects from our GitHub repository then you can "git clone" and grab it and download it on to your local system.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
BRANCHES AND BRANCHING:
1. Lets say we had version 1 and 2, so two commits that were made to our local repository. Now at this point we realize that we want to maybe try out something different, maybe build a new
  feature or just to mess around with a new idea or concept. 
2. So what we can do is instead of continuing to commit to the master branch which is the main branch that you see here, we can also create a side branch. So we can create as many branches
  as we like. So after 2nd commit, we create a new branch and we start committing to this new branch or this experimental branch. We add some features and we write some code. Now 
  simultaneously we can contiue working on the main branch putting out all those essential updates or bits of code that are maintaining our main project but at the same time we can continue
  to update and work on this experimental branch trying things out and committing our experiments to this experimental branch.
3. So now we have 2 branches that are parallel to each other and they can be developed simultaneously. Now if at some point in the future what we decide that that experiment was really
  fruitful and the feature that we built in it was really really great and we'd like to merge it back to the main branch or to the main project, then that can be done really easily as well
  by simply placing a merge request in. And we can bring all of those changes that we experimented with, that we messed around with back to the main project and check to see if there's any
  conflicts that the main branch code. And if not or if after a little bit of editing then we can bring all of those changes into main working master branch. And then we can continue 
  working from here on to the next commit or we can make more branches. And very often what you see in practice is that there'll be multiple branches being worked on at the same time for
  any given large project. And the reason is because sometimes you are developing new feature, sometimes you are fixing bugs and all of these things may break your main project so you don't
  want to do it on the master branch. You only want to put it onto the master branch once you've tested, once you know that everything is working fine and then you can bring your code back
  to the working copy ready for shipment and deployment.
4. Lets navigate to our "PycharmProjects/pythonProject/22_GIT/" Directory.
  > git log
5. You can see most recent commit is denoted by "HEAD" where master (local repository) and also mirrored in our remote (origin) i.e. "origin/master"
6. to create a branch "git branch branch_name"
  > git branch alien-plot
7. To check all the branches: "git branch". Two branches are there and "*" shows which branch you are currently on i.e. master.
  > git branch
=> alient-plot
   *master
8. We can switch to the "alien-plot" by simply writing "git checkout alien-plot". You can see *alien-plot i.e. currently we're on "alien-plot" branch.
  > git checkout alien-plot
  > git branch
=> *alien-plot
   master
9. Now in this branch we'll make some changes. We have made changes to chapter1 and chapter2. Lets go ahead and commit that.
  > git add .
  > git commit -m "modify chapter 1 and 2 to have alien theme"
10. Now we do a "git log", we can see that we have 3 commits made on the master branch and we have 1 commit on the "alien-plot" branch.
11. So lets go back to our master branch. So whenever you're confused where you are, you can always do a "git branch" and see where the * is.
  > git checkout master
12. You can see our master branch is unchanged with respect to the space and alien-plot that we did just now. Nothing changed over here. So while on the master branch I'm going to create a
  new file, I'm going to call it chapter5.txt and lets add something. go ahead and add and commit the changes
  > touch chapter5.txt -> inserted some data
  > git add .
  > git commit -m "add chapter 5"
13. Now after "git log", now in "master" branch we have 4 commits, at 3rd commit we have "origin/master". position of our remote, so on our GitHub repository this was the latest commit that
  it could see.
	But on our local repository 4th commit is in fact the lates commit, the one that we added chapter5.txt
14. You can see if we switch between the branches, that our local files actually changed as I switch branches. Let's just say that I'm quite happy with the changes I've made in terms of my
  "alien-plot" and I would like to merge these changes back into my master branch. So I've done a little bit of experimentation on separate branch, I've messed up few things and it was a
  great experiment. So I am going to put it back into our main master branch.
15. In order to put into our main master branch, what you have to do is go back to the master branch "git checkout master". While we're on the master branch we're going to merge the changes
  inside the "alien-plot" branch. So we use the command "git merge branch_name_which_we_want_to_merge". This opens up VIM text editor, this allows you to add a merge message if you wish.
  > git checkout master
  > git merge alien-plot
16. Now all those changes have been absorbed from alien-plot to master. "alien-plot" branch still exists.